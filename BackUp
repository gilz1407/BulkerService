



@app.route('/Bulker/Start',methods=['POST'])
def StartListen():
    global redisCheckThread
    if redisCheckThread is None:
        listen = True
        redisCheckThread = RedisCheck()
        redisCheckThread.start()
        return "Listening started"
    else:
        return "Already listening"

@app.route('/Bulker/Stop/',methods=['POST'])
def StopListen():
    global listen
    listen = False
    return "Listening stopped"



class RedisCheck(threading.Thread):
    global listen
    def __init__(self):
        threading.Thread.__init__(self)

    def run(self):
        r = connect()  # Connect to local Redis instance
        p = r.pubsub()
        p.subscribe('Bars')  # Subscribe to Bars channel

        while listen:  # Will stay in loop until START message received
            print("Waiting For redisStarter...")
            message = p.get_message()  # Checks for message
            if message:
                command = message['data']  # Get data from message
                bar_json = command.decode('utf8').replace("'", '"')
                Selector().FindSuitablePattern(bar_json)
                print("received: " + str(command))  # Breaks loop

            time.sleep(1)